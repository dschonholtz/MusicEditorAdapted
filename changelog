Created ModelAdapter class
Created Model interface to match otherView
Declared all methods used by otherView in Model
ModelAdapter HAS A Generic Song and IMPLEMENTS Model (I think this is correct design?)
Made getLowestNote and getHighestNote public in GenericSong, also added them to SongRep interface

Changed Note class to OurNote
Created Note class to match otherView
All methods otherView uses on notes are in the Note class now
Note had to be a class and not an interface because they use a static method from it.

Console controller now takes in a Model and uses a ConsoleViewImpl as a view.
Run now calls display on the model given

Controller factory changed to take in a Model instead of a SongRep

MidiViewImpl directly changes the model.  This is bad design but it works.

Composite controller changed significantly
Can pause/play and reset currently.
Scrolling works I guess
Took out scrubbing
trying to figure out how to skip midi to the end.
Changed skip to end to implement the compositeView's display panel's method setLineX

Their play method in compositeview is super weird?  When used to resume it resumes where it was but
it also resets shit?  I used it both to resume and to reset to 0.  That's super weird.

They're dancing around nulls a little bit which is bad practice I guess

Since we're pretty sure their shit reset, how did they do these things before?  If there is a way to make them work
without changing their code, it would be better.  For now, this is working.
IMPORTANT NOTE: HAD TO CHANGE THEIR MIDIVIEWIMPL TO USE INSTRUMENT - 1 OR WE GOT OOB EXCEPTIONS IN DF-TTFAF.TXT
IMPORTANT NOTE: HAD TO COMMENT OUT ADDKEYLISTENER AND ADDMOUSELISTENER IN GUYVIEWIMPL TO ADD THEM PROPERLY

Publicly gets the actual Concrete View this is bad...
Red Line Midi View and Beat are all managed seperately which can lead to disjointed views, and the model.